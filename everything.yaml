---
- hosts: webservers
  name: Base installation
  tags:
    - base
  tasks:
    - debug:
        msg: System {{ ansible_facts }} 
    - name: Install git and dig
      become: yes
      dnf:
        name:
          - git
          - bind-utils
    - name: Install a newer podman
      become: yes
      shell: dnf -y module disable container-tools && dnf -y install 'dnf-command(copr)' && dnf -y copr enable rhcontainerbot/container-selinux && curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/devel:kubic:libcontainers:stable.repo && dnf -y install podman
    - name: Copy across SSH keys for git purposes
      copy:    
        src: "{{ item }}"
        dest: "/home/{{ unix_user }}/.ssh/"
        owner: "{{ unix_user }}"
        mode: 0600
      with_fileglob:
          - "{{ host_ssh_source }}/id_rsa*"
    - name: Make /var/www directory
      become: yes
      file:
        path: /var/www
        state: directory
        owner: "{{ unix_user }}"
        mode: '0777'
    - name: Put SELinux into non-enforced mode
      become: yes
      command: setenforce 0
      ignore_errors: yes
    - name: Put SELinux in non-enforced mode permanently
      become: yes
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=disabled
    - name: Add github.com as known host
      shell: ssh-keyscan -H github.com >> "{{ ansible_env.HOME }}/.ssh/known_hosts"
    - name: Add github personal access token to podman
      shell: "echo {{ github_personal_access_token }} | podman login docker.pkg.github.com -u banool --password-stdin" 
    - name: Install nginx
      become: yes
      dnf:
        name:
          - nginx
    - name: Make user systemd directory
      become: yes
      file:
        path: "/home/{{ unix_user }}/.config/systemd/user"
        state: directory
        owner: "{{ unix_user }}"
        mode: '0777'
    - name: Enable NTP sync with chronyd
      become: yes
      systemd:
        name: chronyd
        daemon_reload: true
        enabled: true
        state: restarted

- hosts: webservers
  become: yes
  tags: nginx
  tasks:
    - name: Make /etc/nginx/sites-available
      file:
        path: /etc/nginx/sites-available
        state: directory
        mode: '0755'
    - name: Make symlink for sites-available called sites-enabled
      file:
        src: /etc/nginx/sites-available
        dest: /etc/nginx/sites-enabled
        state: link
    - name: Delete /etc/nginx/conf.d
      file:
        path: /etc/nginx/conf.d
        state: absent
    - name: Use sites-enabled instead of conf.d
      replace:
        path: /etc/nginx/nginx.conf
        regexp: 'include /etc/nginx/conf.d/\*.conf;'
        replace: 'include /etc/nginx/sites-enabled/*;'
    - name: Restart nginx
      systemd:
        name: nginx
        daemon_reload: true
        enabled: true
        state: restarted
    - name: Enable http in firewalld
      firewalld:
        service: http
        permanent: yes
        state: enabled
    - name: Enable https in firewalld
      firewalld:
        service: https
        permanent: yes
        state: enabled
    - name: Enable 25565-25568 tcp in firewalld
      firewalld:
        port: 25565-25568/tcp
        permanent: yes
        state: enabled
    - name: Enable 25565-25568 udp in firewalld
      firewalld:
        port: 25565-25568/udp
        permanent: yes
        state: enabled
    - name: Enable plex TCP in firewalld
      firewalld:
        port: 32400/tcp
        permanent: yes
        state: enabled
        zone: public
    - name: Enable plex UDP in firewalld
      firewalld:
        port: 32400/tcp
        permanent: yes
        state: enabled
        zone: public
    - name: Enable deluge in firewalld
      firewalld:
        port: 25567/tcp
        permanent: yes
        state: enabled
        zone: public
    - name: Enable mastermind tcp in firewalld
      firewalld:
        port: 12340/tcp
        permanent: yes
        state: enabled
    - name: Add proxy_params file
      become: yes
      template:
        src: templates/proxy_params
        dest: /etc/nginx/proxy_params
        owner: "{{ unix_user }}"
        group: wheel
        mode: '0644'

- hosts: dbservers
  name: Install MySQL 8
  tags:
    - db
  vars:
    user: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
  remote_user: "{{ user }}"
  become: yes
  tasks:
    - name: Install MySQL 8 and Python3 PyMySQL
      dnf:
        name:
          - mysql-server 
          - mysql
          - python3-PyMySQL
        state: latest
    - name: Start and enable MySQL 8
      systemd:
        name: mysqld
        enabled: true
        state: started
    - name: Removes anonymous user account for localhost
      mysql_user:
        name: ''
        host_all: yes
        state: absent
    - name: Create database user with name {{ user }} with all database privileges
      mysql_user:
        name: "{{ user }}"
        password: "{{ password }}"
        priv: '*.*:ALL'
        state: present

- hosts: webservers
  name: Install amaranta candles site
  tags:
    - amaranta_candles
  tasks:
  - name: Pull amaranta candles server image
    command: podman pull docker.pkg.github.com/banool/amaranta_candles/amaranta_candles_server:latest
  - name: Pull amaranta candles ui image
    command: podman pull docker.pkg.github.com/banool/amaranta_candles/amaranta_candles_ui:latest
  - name: Create server systemd spec file
    become: yes
    vars:
      allowed_hosts: "{{ amaranta_candles.allowed_hosts }}"
      deployment_mode: "{{ amaranta_candles.deployment_mode }}"
      secret_key: "{{ amaranta_candles.secret_key }}"
      sql_engine: "{{ amaranta_candles.sql_engine }}"
      sql_database: "{{ amaranta_candles.sql_database }}"
      sql_user: "{{ mysql_user }}"
      sql_password: "{{ mysql_password}}"
      sql_host: "{{ amaranta_candles.sql_host}}"
      sql_port: "{{ amaranta_candles.sql_port}}"
      ui_username: "{{ amaranta_candles.ui_username }}"
      ui_email: "{{ amaranta_candles.ui_email }}"
      ui_password: "{{ amaranta_candles.ui_password }}"
      internal_port: "{{ amaranta_candles.internal_port }}"
      external_port: "{{ amaranta_candles.external_port }}"
      external_static_path: "{{ amaranta_candles.external_static_path }}"
      server_internal_static_path: "{{ amaranta_candles.server_internal_static_path }}"
    template:
      src: templates/systemd/amaranta-candles-server.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/amaranta-candles-server.service"
      owner: "{{ unix_user }}"
      group: "root"
      mode: '0644'
  - name: Create ui systemd spec file
    become: yes
    vars:
      external_static_path: "{{ amaranta_candles.external_static_path }}"
      ui_internal_static_path: "{{ amaranta_candles.ui_internal_static_path }}"
    template:
      src: templates/systemd/amaranta-candles-ui.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/amaranta-candles-ui.service"
      owner: "{{ unix_user }}"
      group: "root"
      mode: '0644'
  - name: Make amaranta candles database in MySQL
    mysql_db:
      name: "{{ amaranta_candles.sql_database }}"
      state: present
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_password }}"
  - name: Make amaranta candles host level static files directory
    file:
      path: "{{ amaranta_candles.external_static_path }}"
      owner: "{{ unix_user }}"
      state: directory
      mode: '0755'
  - name: Start and enable amaranta candles server service
    systemd:
      name: amaranta-candles-server
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user
  - name: Start and enable amaranta candles ui service
    systemd:
      name: amaranta-candles-ui
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user
  - name: Create script to backup the amaranta candles DB
    become: yes
    vars:
      sql_database: "{{ amaranta_candles.sql_database }}"
      dropbox_access_token: "{{ dropbox_access_token }}"
      dropbox_backup_path: "{{ amaranta_candles.dropbox_backup_path }}"
    template:
      src: templates/backup_amaranta_candles.sh.j2
      dest: "/home/{{ unix_user }}/backup_amaranta_candles.sh"
      owner: "{{ unix_user }}"
      group: "root"
      mode: '0744'
  - name: Add backup script to crontab
    cron:
      name: "back up amaranta candles"
      minute: "0"
      hour: "3"
      job: "/home/{{ unix_user }}/backup_amaranta_candles.sh"

- hosts: webservers
  name: Install Net Worth site
  tags:
    - net_worth
  vars:
    unix_user: "{{ unix_user }}"
  tasks:
  - name: Pull net-worth image
    podman_image:
      name: quay.io/banool/net-worth
      tag: latest
  - name: Actually repull net-worth image
    command: podman pull quay.io/banool/net-worth:latest
  - name: Create systemd spec file
    become: yes
    vars:
      allowed_hosts: "{{ net_worth.allowed_hosts }}"
      deployment_mode: "{{ net_worth.deployment_mode }}"
      secret_key: "{{ net_worth.secret_key }}"
      sql_engine: "{{ net_worth.sql_engine }}"
      sql_database: "{{ net_worth.sql_database }}"
      sql_user: "{{ mysql_user }}"
      sql_password: "{{ mysql_password}}"
      sql_host: "{{ net_worth.sql_host}}"
      sql_port: "{{ net_worth.sql_port}}"
      robinhood_username: "{{ net_worth.robinhood_username }}"
      robinhood_password: "{{ net_worth.robinhood_password }}"
      robinhood_2fa_barcode: "{{ net_worth.robinhood_2fa_barcode }}"
      personal_capital_email: "{{ net_worth.personal_capital_email }}"
      personal_capital_password: "{{ net_worth.personal_capital_password }}"
      ui_username: "{{ net_worth.ui_username }}"
      ui_email: "{{ net_worth.ui_email }}"
      ui_password: "{{ net_worth.ui_password }}"
      coinmarketcap_api_key: "{{ net_worth.coinmarketcap_api_key }}"
      internal_port: "{{ net_worth.internal_port }}"
      external_port: "{{ net_worth.external_port }}"
    template:
      src: templates/systemd/net-worth.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/net-worth.service"
      owner: "{{ unix_user }}"
      group: "root"
      mode: '0644'
  - name: Make net worth database in MySQL
    mysql_db:
      name: "{{ net_worth.sql_database }}"
      state: present
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_password }}"
  - name: Start and enable net-worth service
    systemd:
      name: net-worth
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install Codenames Pictures site
  tags:
    - codenames_pictures
    - codenames
  vars:
    unix_user: "{{ unix_user }}"
  tasks:
  - name: Pull codenames-pictures image
    podman_image:
      name: quay.io/banool/codenames-pictures
      tag: latest
  - name: Actually repull codenames-pictures image
    command: podman pull quay.io/banool/codenames-pictures
  - name: Create systemd spec file
    become: yes
    vars:
      internal_port: "{{ codenames_pictures.internal_port }}"
      external_port: "{{ codenames_pictures.external_port }}"
    template:
      src: templates/systemd/codenames-pictures.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/codenames-pictures.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable codenames-pictures service
    systemd:
      name: codenames-pictures
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install Pants
  tags:
    - pants
  vars:
    unix_user: "{{ unix_user }}"
  tasks:
  - name: Make pants pages directory
    become: yes
    file:
      path: "{{ pants.external_pages_directory }}"
      state: directory
      owner: "{{ unix_user }}"
      mode: '0777'
  - name: Pull pants image
    podman_image:
      name: quay.io/banool/pants
      tag: latest
  - name: Actually repull pants image
    command: podman pull quay.io/banool/pants
  - name: Create systemd spec file
    become: yes
    vars:
      consumer_key: "{{ pants.consumer_key }}"
      access_token: "{{ pants.access_token }}"
      rocket_secret_key: "{{ pants.rocket_secret_key }}" 
      internal_port: "{{ pants.internal_port }}"
      external_port: "{{ pants.external_port }}"
      internal_pages_directory: "{{ pants.internal_pages_directory }}"
      external_pages_directory: "{{ pants.external_pages_directory }}"
    template:
      src: templates/systemd/pants.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/pants.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable pants service
    systemd:
      name: pants
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install Trapwords site
  tags:
    - trapwords
  tasks:
  - name: Pull trapwords image
    podman_image:
      name: quay.io/banool/trapwords
      tag: latest
  - name: Actually repull trapwords image
    command: podman pull quay.io/banool/trapwords
  - name: Create systemd spec file
    become: yes
    vars:
      internal_port: "{{ trapwords.internal_port }}"
      external_port: "{{ trapwords.external_port }}"
    template:
      src: templates/systemd/trapwords.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/trapwords.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable trapwords service
    systemd:
      name: trapwords
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install mastermind site
  tags:
    - mastermind
  tasks:
  - name: Pull mastermind image
    podman_image:
      name: quay.io/banool/comp30023-assn2
      tag: latest
  - name: Actually repull mastermind image
    command: podman pull quay.io/banool/comp30023-assn2
  - name: Create systemd spec file
    become: yes
    template:
      src: templates/systemd/mastermind.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/mastermind.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable mastermind service
    systemd:
      name: mastermind
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install dport site
  tags:
    - dport
  vars:
    unix_user: "{{ unix_user }}"
  tasks:
    - git:
        repo: git@github.com:banool/dport-site.git
        dest: /var/www/dport

- hosts: webservers
  name: Install taxdefence site
  tags:
    - taxdefence
  tasks:
    - git:
        repo: git@github.com:banool/taxdefence.git
        dest: /var/www/taxdefence

- hosts: webservers
  name: Install bunkopepi site
  tags:
    - bunkopepi
  tasks:
    - git:
        repo: git@github.com:banool/bunkopepi.git
        dest: /var/www/bunkopepi

- hosts: webservers
  name: Install bunkopepi site
  tags:
    - bunkopepi
  tasks:
    - git:
        repo: git@github.com:banool/bunkopepi.git
        dest: /var/www/bunkopepi

- hosts: webservers
  name: Install internode site
  tags:
    - internode
    - adport
  tasks:
    - git:
        repo: git@github.com:banool/adport-internode.git
        dest: /var/www/internode

- hosts: webservers
  name: Install back server splash site
  tags:
    - back_server_splash
  tasks:
    - git:
        repo: git@github.com:banool/back-server-splash.git
        dest: /var/www/back_server_splash

- hosts: webservers
  name: Install rolly mountain site
  tags:
    - rolly_mountain
  tasks:
    - git:
        repo: git@github.com:banool/comp30019-assn2.git
        dest: /var/www/rolly_mountain

- hosts: webservers
  name: Install Safecycle site
  tags:
    - safecycle
  tasks:
  - name: Pull safecycle image
    podman_image:
      name: quay.io/banool/safecycle
      tag: latest
  - name: Actually repull safecycle image
    command: podman pull quay.io/banool/safecycle
  - name: Create safecycle systemd spec file
    become: yes
    vars:
      google_key: "{{ safecycle.google_key }}"
    template:
      src: templates/systemd/safecycle.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/safecycle.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable safecycle service
    systemd:
      name: safecycle
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install Gomogo site
  tags:
    - gomogo
  tasks:
  - name: Pull gomogo image
    podman_image:
      name: quay.io/banool/gomogo
      tag: latest
  - name: Actually repull gomogo image
    command: podman pull quay.io/banool/gomogo
  - name: Create gomogo systemd spec file
    become: yes
    template:
      src: templates/systemd/gomogo.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/gomogo.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable gomogo service
    systemd:
      name: gomogo
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install foodbrew site (only static, no backend)
  tags:
    - foodbrew 
  tasks:
    - git:
        repo: git@github.com:banool/foodbrew.git
        dest: /var/www/foodbrew

- hosts: webservers
  name: Install auslan site
  tags:
    - auslan
  tasks:
    - git:
        repo: git@github.com:banool/auslan_dictionary.git
        dest: /var/www/auslan

- hosts: webservers
  name: Install diary site
  tags:
    - diary
  tasks:
  - name: Pull diary image
    podman_image:
      name: quay.io/banool/diary-django
      tag: latest
  - name: Actually repull diary image
    command: podman pull quay.io/banool/diary-django
  - name: Make diary database in MySQL
    mysql_db:
      name: "{{ diary.sql_database }}"
      state: present
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_password }}"
  - name: Create diary systemd spec file
    become: yes
    vars:
      allowed_hosts: "{{ diary.allowed_hosts }}"
      secret_key: "{{ diary.secret_key }}"
      sql_engine: "{{ diary.sql_engine }}"
      sql_database: "{{ diary.sql_database }}"
      sql_user: "{{ mysql_user }}"
      sql_password: "{{ mysql_password}}"
      sql_host: "{{ diary.sql_host}}"
      sql_port: "{{ diary.sql_port}}"
      ui_username: "{{ diary.ui_username }}"
      ui_email: "{{ diary.ui_email }}"
      ui_password: "{{ diary.ui_password }}"
    template:
      src: templates/systemd/diary-django.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/diary-django.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable diary-django service
    systemd:
      name: diary-django
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install team heist tactics site
  tags:
    - team_heist_tactics
    - tht
  tasks:
  - name: Make team heist tactics static dir for bindmounting
    become: yes
    file:
      path: "{{ team_heist_tactics.tht_static_dir }}"
      state: directory
      owner: "{{ unix_user }}"
      mode: '0777'
  - name: Pull team heist tactics image
    command: podman pull docker.pkg.github.com/banool/team_heist_tactics/team_heist_tactics:latest
  - name: Create team heist tactics systemd spec file
    become: yes
    vars:
      tht_static_dir: "{{ team_heist_tactics.tht_static_dir }}"
    template:
      src: templates/systemd/team-heist-tactics.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/team-heist-tactics.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable team-heist-tactics service
    systemd:
      name: team-heist-tactics
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install Hot Dogs site
  tags:
    - hot_dogs
    - hotdogs
  tasks:
  - name: Pull Hot Dogs image
    command: podman pull docker.pkg.github.com/banool/hot_dogs/hot_dogs_backend:latest
  - name: Create Hot Dogs systemd spec file
    become: yes
    template:
      src: templates/systemd/hot-dogs.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/hot-dogs.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable hot-dogs service
    systemd:
      name: hot-dogs
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install plex
  tags:
    - plex
  tasks:
    - name: Create plex repo file
      become: yes
      template:
        src: templates/plex.repo
        dest: /etc/yum.repos.d/plex.repo
        owner: "{{ unix_user }}"
        group: wheel
        mode: '0644'
    - name: Install plex
      become: yes
      dnf:
        name:
          - plexmediaserver
    - name: Start and enable plex
      become: yes
      systemd:
        name: plexmediaserver
        daemon_reload: true
        enabled: true
        state: restarted

- hosts: webservers
  name: Install dont site
  tags:
    - dont
  tasks:
    - name: Copy dont files in
      copy: "src={{ lookup('env','PWD') }}/other_sites/dont dest=/var/www remote_src=no"

- hosts: webservers
  name: Setup deluge 
  tags:
    - deluge
  tasks:
    - name: Pull deluge image
      command: podman pull linuxserver/deluge
    - name: Create deluge download directory
      become: yes
      file:
        path: "{{ deluge.download_directory }}"
        state: directory
        owner: "{{ unix_user }}"
        mode: '0777'
    - name: Create deluge config directory
      become: yes
      file:
        path: "{{ deluge.config_directory }}"
        state: directory
        owner: "{{ unix_user }}"
        mode: '0777'
    - name: Create deluge web config file
      become: yes
      vars:
        config_directory: "{{ deluge.config_directory }}/web.conf"
        download_directory: "{{ deluge.download_directory }}"
        external_port: "{{ deluge.external_port }}"
      template:
        src: templates/deluge/web.conf.j2
        dest: "{{ deluge.config_directory }}/web.conf"
        owner: "{{ unix_user }}"
        group: wheel
        mode: '0644'
    - name: Create deluge systemd file
      become: yes
      vars:
        config_directory: "{{ deluge.config_directory }}"
        download_directory: "{{ deluge.download_directory }}"
        puid: 1000
        pgid: 1000
        timezone: "America/Los_Angeles"
      template:
        src: templates/systemd/deluge.service.j2
        dest: "/etc/systemd/system/deluge.service"
        owner: "{{ unix_user }}"
        group: wheel
        mode: '0644'
    - name: Start and enable deluge
      become: yes
      systemd:
        name: deluge 
        daemon_reload: true
        enabled: true
        state: restarted
    - name: Alter download path in core.conf
      become: yes
      command: "podman exec -it deluge sed -i 's@/root/Downloads@/downloads@g' /config/core.conf"
      ignore_errors: yes

- hosts: webservers
  name: Setup sites with nginx
  tags:
    - nginx
    - sites
  vars:
    server_name: "{{ server_name }}"
  tasks:
    - name: Create internode nginx config file
      become: yes
      template:
        src: templates/nginx/internode.j2
        dest: /etc/nginx/sites-enabled/internode
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create dport nginx config file
      become: yes
      template:
        src: templates/nginx/dport.j2
        dest: /etc/nginx/sites-enabled/dport
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create net-worth nginx config file
      become: yes
      template:
        src: templates/nginx/net-worth.j2
        dest: /etc/nginx/sites-enabled/net-worth
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create bunkopepi nginx config file
      become: yes
      template:
        src: templates/nginx/bunkopepi.j2
        dest: /etc/nginx/sites-enabled/bunkopepi
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create codenames nginx config file
      become: yes
      template:
        src: templates/nginx/codenames.j2
        dest: /etc/nginx/sites-enabled/codenames
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create trapwords nginx config file
      become: yes
      template:
        src: templates/nginx/trapwords.j2
        dest: /etc/nginx/sites-enabled/trapwords
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create taxdefence nginx config file
      become: yes
      template:
        src: templates/nginx/taxdefence.j2
        dest: /etc/nginx/sites-enabled/taxdefence
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create amaranta candles nginx config file
      become: yes
      template:
        src: templates/nginx/amaranta-candles.j2
        dest: /etc/nginx/sites-enabled/amaranta-candles
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create dont nginx config file
      become: yes
      template:
        src: templates/nginx/dont.j2
        dest: /etc/nginx/sites-enabled/dont
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create plex nginx config file
      become: yes
      template:
        src: templates/nginx/plex.j2
        dest: /etc/nginx/sites-enabled/plex
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create deluge nginx config file
      become: yes
      template:
        src: templates/nginx/deluge.j2
        dest: /etc/nginx/sites-enabled/deluge
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create pants nginx config file
      become: yes
      vars:
        external_pages_directory: "{{ pants.external_pages_directory }}"
      template:
        src: templates/nginx/pants.j2
        dest: /etc/nginx/sites-enabled/pants
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create back server splash nginx config file
      become: yes
      template:
        src: templates/nginx/back-server-splash.j2
        dest: /etc/nginx/sites-enabled/back-server-splash
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create rolly mountain nginx config file
      become: yes
      template:
        src: templates/nginx/rollymountain.j2
        dest: /etc/nginx/sites-enabled/rollymountain
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create safecycle config file
      become: yes
      template:
        src: templates/nginx/safecycle.j2
        dest: /etc/nginx/sites-enabled/safecycle
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create gomogo config file
      become: yes
      template:
        src: templates/nginx/gomogo.j2
        dest: /etc/nginx/sites-enabled/gomogo
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create foodbrew config file
      become: yes
      template:
        src: templates/nginx/foodbrew.j2
        dest: /etc/nginx/sites-enabled/foodbrew
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create diary config file
      become: yes
      template:
        src: templates/nginx/diary-django.j2
        dest: /etc/nginx/sites-enabled/diary-django
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create team heist tactics config file
      become: yes
      vars:
        tht_static_dir: "{{ team_heist_tactics.tht_static_dir }}"
      template:
        src: templates/nginx/team-heist-tactics.j2
        dest: /etc/nginx/sites-enabled/team-heist-tactics
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create Hot Dogs config file
      become: yes
      template:
        src: templates/nginx/hot-dogs.j2
        dest: /etc/nginx/sites-enabled/hot-dogs
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create auslan config file
      become: yes
      template:
        src: templates/nginx/auslan.j2
        dest: /etc/nginx/sites-enabled/auslan
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'

- hosts: webservers
  name: Setup https
  tags:
    - https
  tasks:
    - name: Add epel-release
      become: yes
      command: dnf install -y epel-release && dnf upgrade
      ignore_errors: yes
    - name: Get public IP of this host
      command: curl https://ipinfo.io/ip
      register: public_ip
    - name: Get IP of domain
      command: "dig -4 +short {{ server_name }}"
      register: domain_ip
    - name: Print debug success when both IPs are the same
      debug: 
        msg: "Public IP: {{ public_ip.stdout }} Domain IP: {{ domain_ip.stdout }}" 
    - name: Confirm both IPs the same
      fail:
        msg: The public IP of the host and the IP of the domain are not the same
      when: public_ip.stdout != domain_ip.stdout
    - name: Print debug success when both IPs are the same
      debug: 
        msg: The public IP of the host and the IP of the domain are the same, hopefully this means your DNS records are correct. Also think about NAT. Proceeding with https
    - name: Install snap
      become: yes
      dnf:
        name:
          - snapd
    - name: Enable snapd
      become: yes
      command: systemctl enable --now snapd.socket
    - name: Enabled snapd classic support
      become: yes
      ansible.builtin.file:
        src: /var/lib/snapd/snap
        dest: /snap
        owner: root
        group: root
        state: link
    - name: Update snap
      become: yes
      shell: snap install core; snap refresh core
    - name: Get certbot
      become: yes
      command: snap install --classic certbot
    - name: Get all the sites installed
      become: yes
      shell: nginx -T 2>/dev/null | grep "server_name " | grep -v '# ser' | sed 's/.*server_name \(.*\);/\1/' | sed 's/ /\n/' | tr ' ' '\n' | sort -u | grep [a-z] | grep -v tax | tr '\n' ',' | sed 's/.$//'
      register: comma_separated_sites
    - name: Run certbot, mostly to collect new sites
      become: yes
      shell: certbot --nginx -n --expand --agree-tos --email {{email}} --domains {{comma_separated_sites.stdout}}
    - name: Put autorenew in crontab
      become: yes
      cron:
        name: "autorenew certs with cerbot"
        minute: "0"
        hour: "4"
        job: "/usr/bin/certbot renew"
    - name: Write comma separated enabled sites to local file
      local_action: copy content="{{comma_separated_sites.stdout}}" dest="{{ playbook_dir }}/sites.comma"

- hosts: webservers
  name: Setup dynamic dns
  tags:
    - dns
    - ddclient
  tasks:
    - name: Install ddclient
      become: yes
      dnf:
        name:
          - ddclient
    - name: Backup ddclient config
      become: yes
      command: cp /etc/ddclient.conf /etc/ddclient.conf.bak
    - name: Copy in ddclient config file
      become: yes
      vars:
        dport_me: "{{ ddclient.dport_me }}"
        # amaranta_house: "{{ ddclient.amaranta_house }}"
        heist_team: "{{ ddclient.heist_team }}"
        # taxdefence_com_au: "{{ ddclient.taxdefence_com_au }}"
      template:
        src: templates/ddclient.conf
        dest: /etc/ddclient.conf
        owner: ddclient
        group: ddclient
        mode: '0600'
    - name: Enable ddclient service
      become: yes
      systemd:
        name: ddclient
        daemon_reload: true
        enabled: true
        state: restarted

- hosts: webservers
  name: Final touches
  tags:
    - final
  tasks:
    - name: Turn off screen
      become: yes
      shell: "exit && echo 0 | sudo tee /sys/class/backlight/intel_backlight/brightness" # todo reenable if needed
    - name: Restart nginx
      become: yes
      systemd:
        name: nginx
        daemon_reload: true
        enabled: true
        state: restarted
    - name: Check locally that sites are alive
      shell: "python3 {{ playbook_dir }}/check.py --read-from-sites-comma"
      delegate_to: localhost
    - name: Add script to update containers
      copy:
        src: templates/update_containers.py
        dest: "/home/{{ unix_user }}/"
        owner: "{{ unix_user }}"
        mode: '0755'
    - name: Add container update script to crontab
      cron:
        name: "Update containers"
        minute: "*/10"
        job: "python3 /home/{{ unix_user }}/update_containers.py"





# TODO
# All other sites
# Just use pants crate from crates.io perhaps, add hook to pants repo that makes you build and push it
