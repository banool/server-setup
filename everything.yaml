---
- hosts: webservers
  name: Base installation
  tags:
    - base
  tasks:
    - name: Install git
      become: yes
      dnf:
        name:
          - git
    - name: Copy across SSH keys for git purposes
      copy:    
        src: "{{ item }}"
        dest: "/home/{{ unix_user }}/.ssh/"
        owner: "{{ unix_user }}"
        mode: 0600
      with_fileglob:
          - "{{ host_ssh_source }}/id_rsa*"
    - name: Make /var/www directory
      become: yes
      file:
        path: /var/www
        state: directory
        owner: "{{ unix_user }}"
        mode: '0777'
    - name: Put SELinux into permissive mode
      become: yes
      command: setenforce 0
    - name: Put SELinux in permissive mode permanently
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=permissive
    - name: Add github.com as known host
      shell: ssh-keyscan -H github.com >> "{{ ansible_env.HOME }}/.ssh/known_hosts"
    - name: Add github personal access token to podman
      shell: "echo {{ github_personal_access_token }} | podman login docker.pkg.github.com -u banool --password-stdin" 
    - name: Install nginx
      become: yes
      dnf:
        name:
          - nginx
    - name: Make user systemd directory
      become: yes
      file:
        path: "/home/{{ unix_user }}/.config/systemd/user"
        state: directory
        owner: "{{ unix_user }}"
        mode: '0777'

- hosts: webservers
  become: true
  tags: nginx
  tasks:
    - name: Make /etc/nginx/sites-available
      file:
        path: /etc/nginx/sites-available
        state: directory
        mode: '0755'
    - name: Make symlink for sites-available called sites-enabled
      file:
        src: /etc/nginx/sites-available
        dest: /etc/nginx/sites-enabled
        state: link
    - name: Delete /etc/nginx/conf.d
      file:
        path: /etc/nginx/conf.d
        state: absent
    - name: Use sites-enabled instead of conf.d
      replace:
        path: /etc/nginx/nginx.conf
        regexp: 'include /etc/nginx/conf.d/\*.conf;'
        replace: 'include /etc/nginx/sites-enabled/*;'
    - name: Restart nginx
      systemd:
        name: nginx
        daemon_reload: true
        enabled: true
        state: restarted
    - name: Enable http in firewalld
      firewalld:
        service: http
        permanent: yes
        state: enabled
    - name: Enable https in firewalld
      firewalld:
        service: https
        permanent: yes
        state: enabled
    - name: Enable 25565-25568 tcp in firewalld
      firewalld:
        port: 25565-25568/tcp
        permanent: yes
        state: enabled
    - name: Enable 25565-25568 udp in firewalld
      firewalld:
        port: 25565-25568/udp
        permanent: yes
        state: enabled
    - name: Enable plex TCP in firewalld
      firewalld:
        port: 32400/tcp
        permanent: yes
        state: enabled
        zone: public
    - name: Enable plex UDP in firewalld
      firewalld:
        port: 32400/tcp
        permanent: yes
        state: enabled
        zone: public
    - name: Enable deluge in firewalld
      firewalld:
        port: 25567
        permanent: yes
        state: enabled
        zone: public
    - name: Add proxy_params file
      become: yes
      template:
        src: templates/proxy_params
        dest: /etc/nginx/proxy_params
        owner: "{{ unix_user }}"
        group: wheel
        mode: '0644'

- hosts: dbservers
  name: Install MySQL 8
  tags:
    - db
  vars:
    user: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
  remote_user: "{{ user }}"
  become: yes
  tasks:
    - name: Install MySQL 8 and Python3 PyMySQL
      dnf:
        name:
          - mysql-server 
          - mysql
          - python3-PyMySQL
        state: latest
    - name: Start and enable MySQL 8
      systemd:
        name: mysqld
        enabled: true
        state: started
    - name: Removes anonymous user account for localhost
      mysql_user:
        name: ''
        host_all: yes
        state: absent
    - name: Create database user with name {{ user }} with all database privileges
      mysql_user:
        name: "{{ user }}"
        password: "{{ password }}"
        priv: '*.*:ALL'
        state: present

- hosts: webservers
  name: Install amaranta candles site
  tags:
    - amaranta_candles
  tasks:
  - name: Pull amaranta candles server image
    command: podman pull docker.pkg.github.com/banool/amaranta_candles/amaranta_candles_server:latest
  - name: Pull amaranta candles ui image
    command: podman pull docker.pkg.github.com/banool/amaranta_candles/amaranta_candles_ui:latest
  - name: Create server systemd spec file
    become: yes
    vars:
      allowed_hosts: "{{ amaranta_candles.allowed_hosts }}"
      deployment_mode: "{{ amaranta_candles.deployment_mode }}"
      secret_key: "{{ amaranta_candles.secret_key }}"
      sql_engine: "{{ amaranta_candles.sql_engine }}"
      sql_database: "{{ amaranta_candles.sql_database }}"
      sql_user: "{{ mysql_user }}"
      sql_password: "{{ mysql_password}}"
      sql_host: "{{ amaranta_candles.sql_host}}"
      sql_port: "{{ amaranta_candles.sql_port}}"
      ui_username: "{{ amaranta_candles.ui_username }}"
      ui_email: "{{ amaranta_candles.ui_email }}"
      ui_password: "{{ amaranta_candles.ui_password }}"
      internal_port: "{{ amaranta_candles.internal_port }}"
      external_port: "{{ amaranta_candles.external_port }}"
    template:
      src: templates/systemd/amaranta-candles-server.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/amaranta-candles-server.service"
      owner: "{{ unix_user }}"
      group: "root"
      mode: '0644'
  - name: Create ui systemd spec file
    become: yes
    template:
      src: templates/systemd/amaranta-candles-ui.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/amaranta-candles-ui.service"
      owner: "{{ unix_user }}"
      group: "root"
      mode: '0644'
  - name: Make amaranta candles database in MySQL
    mysql_db:
      name: "{{ amaranta_candles.sql_database }}"
      state: present
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_password }}"
  - name: Start and enable amaranta candles server service
    systemd:
      name: amaranta-candles-server
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user
  - name: Start and enable amaranta candles ui service
    systemd:
      name: amaranta-candles-ui
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install Net Worth site
  tags:
    - net_worth
  vars:
    unix_user: "{{ unix_user }}"
  tasks:
  - name: Pull net-worth image
    podman_image:
      name: quay.io/banool/net-worth
      tag: latest
  - name: Actually repull net-worth image
    command: podman pull quay.io/banool/net-worth:latest
  - name: Create systemd spec file
    become: yes
    vars:
      allowed_hosts: "{{ net_worth.allowed_hosts }}"
      deployment_mode: "{{ net_worth.deployment_mode }}"
      secret_key: "{{ net_worth.secret_key }}"
      sql_engine: "{{ net_worth.sql_engine }}"
      sql_database: "{{ net_worth.sql_database }}"
      sql_user: "{{ mysql_user }}"
      sql_password: "{{ mysql_password}}"
      sql_host: "{{ net_worth.sql_host}}"
      sql_port: "{{ net_worth.sql_port}}"
      robinhood_username: "{{ net_worth.robinhood_username }}"
      robinhood_password: "{{ net_worth.robinhood_password }}"
      robinhood_2fa_barcode: "{{ net_worth.robinhood_2fa_barcode }}"
      personal_capital_email: "{{ net_worth.personal_capital_email }}"
      personal_capital_password: "{{ net_worth.personal_capital_password }}"
      ui_username: "{{ net_worth.ui_username }}"
      ui_email: "{{ net_worth.ui_email }}"
      ui_password: "{{ net_worth.ui_password }}"
      coinmarketcap_api_key: "{{ net_worth.coinmarketcap_api_key }}"
      internal_port: "{{ net_worth.internal_port }}"
      external_port: "{{ net_worth.external_port }}"
    template:
      src: templates/systemd/net-worth.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/net-worth.service"
      owner: "{{ unix_user }}"
      group: "root"
      mode: '0644'
  - name: Make net worth database in MySQL
    mysql_db:
      name: "{{ net_worth.sql_database }}"
      state: present
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_password }}"
  - name: Start and enable net-worth service
    systemd:
      name: net-worth
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install Codenames Pictures site
  tags:
    - codenames_pictures
  vars:
    unix_user: "{{ unix_user }}"
  tasks:
  - name: Pull codenames-pictures image
    podman_image:
      name: quay.io/banool/codenames-pictures
      tag: latest
  - name: Actually repull codenames-pictures image
    command: podman pull quay.io/banool/codenames-pictures
  - name: Create systemd spec file
    become: yes
    vars:
      internal_port: "{{ codenames_pictures.internal_port }}"
      external_port: "{{ codenames_pictures.external_port }}"
    template:
      src: templates/systemd/codenames-pictures.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/codenames-pictures.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable codenames-pictures service
    systemd:
      name: codenames-pictures
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install Trapwords site
  tags:
    - trapwords
  tasks:
  - name: Pull trapwords image
    podman_image:
      name: quay.io/banool/trapwords
      tag: latest
  - name: Actually repull trapwords image
    command: podman pull quay.io/banool/trapwords
  - name: Create systemd spec file
    become: yes
    vars:
      internal_port: "{{ trapwords.internal_port }}"
      external_port: "{{ trapwords.external_port }}"
    template:
      src: templates/systemd/trapwords.service.j2
      dest: "/home/{{ unix_user }}/.config/systemd/user/trapwords.service"
      owner: "{{ unix_user }}"
      group: wheel
      mode: '0644'
  - name: Start and enable trapwords service
    systemd:
      name: trapwords
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user

- hosts: webservers
  name: Install dport site
  tags:
    - dport
  vars:
    unix_user: "{{ unix_user }}"
  tasks:
    - git:
        repo: git@github.com:banool/dport-site.git
        dest: /var/www/dport

- hosts: webservers
  name: Install taxdefence site
  tags:
    - taxdefence
  tasks:
    - git:
        repo: git@github.com:banool/taxdefence.git
        dest: /var/www/taxdefence

- hosts: webservers
  name: Install bunkopepi site
  tags:
    - bunkopepi
  tasks:
    - git:
        repo: git@github.com:banool/bunkopepi.git
        dest: /var/www/bunkopepi

- hosts: webservers
  name: Install bunkopepi site
  tags:
    - bunkopepi
  tasks:
    - git:
        repo: git@github.com:banool/bunkopepi.git
        dest: /var/www/bunkopepi

- hosts: webservers
  name: Install internode site
  tags:
    - internode
  tasks:
    - git:
        repo: git@github.com:banool/adport-internode.git
        dest: /var/www/internode

- hosts: webservers
  name: Install plex
  tags:
    - plex
  tasks:
    - name: Create plex repo file
      become: yes
      template:
        src: templates/plex.repo
        dest: /etc/yum.repos.d/plex.repo
        owner: "{{ unix_user }}"
        group: wheel
        mode: '0644'
    - name: Install plex
      become: yes
      dnf:
        name:
          - plexmediaserver
    - name: Start and enable plex
      become: yes
      systemd:
        name: plexmediaserver
        daemon_reload: true
        enabled: true
        state: restarted

- hosts: webservers
  name: Install dont site
  tags:
    - dont
  tasks:
    - name: Copy dont files in
      copy: "src={{ lookup('env','PWD') }}/other_sites/dont dest=/var/www remote_src=no"

- hosts: webservers
  name: Setup deluge 
  tags:
    - deluge
  tasks:
    - name: Pull deluge image
      command: podman pull linuxserver/deluge
    - name: Create deluge download directory
      become: yes
      file:
        path: "{{ deluge.download_directory }}"
        state: directory
        owner: "{{ unix_user }}"
        mode: '0777'
    - name: Create deluge config directory
      become: yes
      file:
        path: "{{ deluge.config_directory }}"
        state: directory
        owner: "{{ unix_user }}"
        mode: '0777'
    - name: Create deluge config file
      become: yes
      vars:
        config_directory: "{{ deluge.config_directory }}/web.conf"
        download_directory: "{{ deluge.download_directory }}"
        external_port: "{{ deluge.external_port }}"
      template:
        src: templates/deluge/web.conf.j2
        dest: "{{ deluge.config_directory }}/web.conf"
        owner: "{{ unix_user }}"
        group: wheel
        mode: '0644'
    - name: Create deluge systemd file
      become: yes
      vars:
        config_directory: "{{ deluge.config_directory }}"
        download_directory: "{{ deluge.download_directory }}"
        puid: 1000
        pgid: 1000
        timezone: "America/Los_Angeles"
      template:
        src: templates/systemd/deluge.service.j2
        dest: "/etc/systemd/system/deluge.service"
        owner: "{{ unix_user }}"
        group: wheel
        mode: '0644'
    - name: Start and enable deluge
      become: yes
      systemd:
        name: deluge 
        daemon_reload: true
        enabled: true
        state: restarted

- hosts: webservers
  name: Setup sites with nginx
  tags:
    - nginx
    - sites
  vars:
    server_name: "{{ server_name }}"
  tasks:
    - name: Create internode nginx config file
      become: yes
      template:
        src: templates/nginx/internode.j2
        dest: /etc/nginx/sites-enabled/internode
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create dport nginx config file
      become: yes
      template:
        src: templates/nginx/dport.j2
        dest: /etc/nginx/sites-enabled/dport
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create net-worth nginx config file
      become: yes
      template:
        src: templates/nginx/net-worth.j2
        dest: /etc/nginx/sites-enabled/net-worth
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create bunkopepi nginx config file
      become: yes
      template:
        src: templates/nginx/bunkopepi.j2
        dest: /etc/nginx/sites-enabled/bunkopepi
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create codenames nginx config file
      become: yes
      template:
        src: templates/nginx/codenames.j2
        dest: /etc/nginx/sites-enabled/codenames
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create trapwords nginx config file
      become: yes
      template:
        src: templates/nginx/trapwords.j2
        dest: /etc/nginx/sites-enabled/trapwords
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create taxdefence nginx config file
      become: yes
      template:
        src: templates/nginx/taxdefence.j2
        dest: /etc/nginx/sites-enabled/taxdefence
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create amaranta candles nginx config file
      become: yes
      template:
        src: templates/nginx/amaranta-candles.j2
        dest: /etc/nginx/sites-enabled/amaranta-candles
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create dont nginx config file
      become: yes
      template:
        src: templates/nginx/dont.j2
        dest: /etc/nginx/sites-enabled/dont
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create plex nginx config file
      become: yes
      template:
        src: templates/nginx/plex.j2
        dest: /etc/nginx/sites-enabled/plex
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'
    - name: Create deluge nginx config file
      become: yes
      template:
        src: templates/nginx/deluge.j2
        dest: /etc/nginx/sites-enabled/deluge
        owner: "{{ unix_user }}"
        group: "root"
        mode: '0644'

- hosts: webservers
  name: Setup https
  tags:
    - https
  tasks:
    - name: Get public IP of this host
      command: "dig -4 @resolver1.opendns.com ANY myip.opendns.com +short"
      register: public_ip
    - name: Get IP of domain
      command: "dig -4 +short {{ server_name }}"
      register: domain_ip
    - name: Print debug success when both IPs are the same
      debug: 
        msg: "Public IP: {{ public_ip.stdout }} Domain IP: {{ domain_ip.stdout }}" 
    - name: Confirm both IPs the same
      fail:
        msg: The public IP of the host and the IP of the domain are not the same
      when: public_ip.stdout != domain_ip.stdout
    - name: Print debug success when both IPs are the same
      debug: 
        msg: The public IP of the host and the IP of the domain are the same, hopefully this means your DNS records are correct. Also think about NAT. Proceeding with https
    - name: Get certbot
      become: yes
      shell: wget https://dl.eff.org/certbot-auto && mv certbot-auto /usr/local/bin/certbot-auto && chown root /usr/local/bin/certbot-auto && chmod 0755 /usr/local/bin/certbot-auto
    - name: Print cerbot command we will run
      debug:
        msg: "/usr/local/bin/certbot-auto --nginx -n --agree-tos --email {{ email }} --domains {{ domains }} --expand"
    - name: Run certbot
      become: yes
      command: /usr/local/bin/certbot-auto --nginx -n --agree-tos --email {{ email }} --domains {{ domains }} --expand
    - name: Put autorenew in crontab
      cron:
        name: "autorenew certs with cerbot"
        minute: "0"
        hour: "2"
        job: "/usr/local/bin/certbot-auto renew -q"

- hosts: webservers
  name: Final touches
  tags:
    - final
  tasks:
    - name: Turn off screen
      become: yes
      shell: "echo 0 | sudo tee /sys/class/backlight/intel_backlight/brightness"
    - name: Restart nginx
      become: yes
      systemd:
        name: nginx
        daemon_reload: true
        enabled: true
        state: restarted


# TODO
# All other sites
# Deluge
